package Analyzers;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.*;
import Errores.Errores;
import Tools.TypeVariable;
import Tools.TypeVariableG;
import Tools.VariableValue;
import Tools.ArithmeticExp;
import Tools.StatisticalExp;
import Tools.VariableDeclaration;
import Tools.Instructions;
import Tools.SetCustom;
import java.util.HashMap;
class Parser;

parser code{:
    public Instructions mainM = new Instructions();
    ArrayList<Errores> erroresSintacticos = new ArrayList<Errores>();
    public void syntax_error(Symbol s){
            
        System.out.println("Sintax error: " +s.value + " en la lÃ­nea " + s.right+ " en la columna " + s.left+"test->");
        erroresSintacticos.add(new Errores(1,"El caracter : '"+ParserSym.terminalNames[s.sym]+"no se esperaba", String.valueOf(s.right) ,String.valueOf(s.left)));
    }

    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
            System.out.println("El error no se pudo recueprar");
    }

	public void getInstructions(){
		mainM.execute();
	}

:};

terminal String TK_program;
terminal String TK_var;
terminal String TK_colon;
terminal String TK_double;
terminal String TK_lbracket;
terminal String TK_rbracket;
terminal String TK_id;
terminal String TK_minus;
terminal String TK_lt;
terminal String TK_gt;
terminal String TK_string;
terminal String TK_semicolon;
terminal String TK_arr;
terminal String TK_comma;
terminal String TK_lparen;
terminal String TK_rparen;
terminal String TK_sum;
terminal String TK_res;
terminal String TK_mul;
terminal String TK_div;
terminal String TK_mod;
terminal String TK_media;
terminal String TK_mediana;
terminal String TK_print;
terminal String TK_column;
terminal String TK_graphbar;
terminal String TK_titulo;
terminal String TK_ejex;
terminal String TK_ejey;
terminal String TK_titulox;
terminal String TK_tituloy;
terminal String TK_exec;
terminal String TK_graphline;
terminal String TK_graphpie;
terminal String TK_label;
terminal String TK_values;
terminal String TK_histogram;
terminal String TK_end;
terminal String TK_console;
terminal String TK_equal;
terminal String TK_char;
terminal String TK_moda;
terminal String TK_varianza;
terminal String TK_max;
terminal String TK_min;



non terminal  INIT,INSTRUCTIONS, TYPE,CONSOLE_ARRAY;
non terminal VariableValue ARRAY_EXP,STATISTICAL_EXP,ARITHMETHIC_EXP,VALUE,INSTRUCTION,DECLARATION,EXP,VALUEPRINT,TITLE,CHAR,GRAPH,CONSOLE;
non terminal String TYPE_S,OP,VARIABLE;
non terminal ArrayList<VariableValue> VALUES,VALUESPRINT;
non terminal VariableDeclaration ATTRIBUTE_GRAPH;
non terminal TypeVariableG TYPE_GRAPH;
// non terminal ArrayList<VariableValue> ATTRIBUTES_GRAPH;
non terminal HashMap<String, Object> ATTRIBUTES_GRAPH;
// ---> Precedencia de menor a mayor;
precedence left TK_colon;

start with INIT;

INIT ::= 
	TK_program INSTRUCTIONS TK_end TK_program |
	TK_program TK_end TK_program|
        error;

INSTRUCTIONS ::=
	INSTRUCTIONS INSTRUCTION:i {:mainM.push((i));:} |
	INSTRUCTION:i {: mainM.push((i)); :};

INSTRUCTION ::=
	DECLARATION:r TK_end TK_semicolon {:RESULT = r;:} |
	CONSOLE:r TK_end TK_semicolon{:RESULT = r;:}|
	GRAPH:r TK_end TK_semicolon {:RESULT = r;:};

DECLARATION ::= 
	TK_var TK_colon TYPE TK_colon TK_colon TK_id:id TK_lt TK_minus EXP:e {: //tableSym.put(id, e);
																			//System.out.println(e);
																			RESULT = new VariableValue(new VariableDeclaration(id, e),TypeVariable.DECLARATION);  
																			:} |
	TK_arr TK_colon TYPE TK_colon TK_colon TK_id:id TK_lt TK_minus EXP:e {: //tableSym.put(id, e); 
																			//System.out.println(e);
																			RESULT = new VariableValue(new VariableDeclaration(id, e),TypeVariable.DECLARATION);
																			:};

TYPE ::=
	TK_double |
	TK_char TK_lbracket TK_rbracket|
        error;

EXP ::=
	TK_id:r {: RESULT = new VariableValue(r,TypeVariable.ID); :} |
	TK_double:r {: RESULT = new VariableValue(Double.parseDouble(r),TypeVariable.DOUBLE); 
	//System.out.println("valor d ->"+ r); 
	:} |
	TK_string:r {: RESULT = new VariableValue(String.valueOf(r),TypeVariable.STRING); :} |
	ARRAY_EXP:r {: RESULT = r; :}|
	ARITHMETHIC_EXP:r {: RESULT = r; :}|
    STATISTICAL_EXP:r {: RESULT = r; :} ;


ARRAY_EXP ::=
	TK_lbracket VALUES:vs {: RESULT = new VariableValue(vs,TypeVariable.ARRAY); :} TK_rbracket;

VALUES ::=
	VALUES:val TK_comma VALUE:v {: RESULT = val; RESULT.add(v);:} |
	VALUE:v {: RESULT = new ArrayList<>(Arrays.asList(v)); :} ;


VALUE ::=
	TK_double:r {: RESULT = new VariableValue(Double.parseDouble(r),TypeVariable.DOUBLE); :} |
	TK_string:r {: RESULT = new VariableValue(String.valueOf(r),TypeVariable.STRING); :} |
	TK_id:r {: RESULT =  new VariableValue(r,TypeVariable.ID); :} |
	ARITHMETHIC_EXP:r {: RESULT =  r; :}|
	STATISTICAL_EXP:r {: RESULT = r; :} ;


ARITHMETHIC_EXP ::=
	OP:operador TK_lparen EXP:v1 TK_comma EXP:v2 TK_rparen {: RESULT= new VariableValue(new ArithmeticExp(v1,v2,operador),TypeVariable.AR); :};

STATISTICAL_EXP ::=
    TYPE_S:type_ TK_lparen ARRAY_EXP:array TK_rparen {: RESULT = new VariableValue(new StatisticalExp(array, type_),TypeVariable.ST);:}|
    TYPE_S:type_ TK_lparen TK_id:id TK_rparen  {: RESULT = new VariableValue(new StatisticalExp(id, type_),TypeVariable.ST);:}|
    error;

TYPE_S ::=
	TK_media:t {: RESULT = t ; :}  |
	TK_mediana:t {: RESULT = t ; :}|
    TK_moda:t {: RESULT = t ; :}|
    TK_varianza:t {: RESULT = t ; :}|
    TK_max:t {: RESULT = t ; :}|
    TK_min:t {: RESULT = t ; :}|
    error;

OP ::=
	TK_sum {: RESULT = "+" ; :} |
	TK_res {: RESULT = "-" ; :} |
	TK_mul {: RESULT = "*" ; :} |
	TK_div {: RESULT = "/" ; :} |
	TK_mod {: RESULT = "%" ; :} ;

CONSOLE ::=
	TK_console TK_colon TK_colon TK_print TK_equal VALUESPRINT:e {: RESULT = new VariableValue(e,TypeVariable.CONSOLE); :}|
	TK_console TK_colon TK_colon TK_column TK_equal TITLE TK_minus TK_gt CONSOLE_ARRAY:e {: RESULT = new VariableValue(e,TypeVariable.PRINTARRAY); :} |
    error ;

CONSOLE_ARRAY ::=
	TK_lbracket VALUESPRINT:vs TK_rbracket {: RESULT = new VariableValue(vs,TypeVariable.ARRAY); :} |
	TK_id:r {: RESULT = new VariableValue(r,TypeVariable.ID); :} |
        error;

VALUESPRINT ::=
	VALUESPRINT:val TK_comma VALUEPRINT:v {: RESULT = val; RESULT.add(v);:} |
	VALUEPRINT:v {: RESULT = new ArrayList<>(Arrays.asList(v)); :} ;

VALUEPRINT ::=
	TK_id:r {: RESULT = new VariableValue(r,TypeVariable.ID); :} |
	TK_string:r  {: RESULT = new VariableValue(String.valueOf(r),TypeVariable.STRING); :} |
	TK_double:r {: RESULT = new VariableValue(Double.parseDouble(r),TypeVariable.DOUBLE); :} |
	ARITHMETHIC_EXP:r {: RESULT =  r; :};

GRAPH ::=
	TYPE_GRAPH:id TK_lparen ATTRIBUTES_GRAPH:att TK_exec TYPE_GRAPH TK_end TK_semicolon TK_rparen {: RESULT = new VariableValue(new VariableDeclaration( id,att), TypeVariable.GRAPH) ; :};

TYPE_GRAPH ::=
	TK_graphbar:r {: RESULT = TypeVariableG.BARRAS; :} |
	TK_graphline:r {: RESULT = TypeVariableG.LINEA; :}|
	TK_graphpie:r {: RESULT = TypeVariableG.PIE; :}|
	TK_histogram:r {: RESULT = TypeVariableG.HISTOGRAMA; :}|
    error;

TITLE ::=
	TK_string :r  {: RESULT = new VariableValue(String.valueOf(r),TypeVariable.STRING); :} |
	TK_id:r {: RESULT =  new VariableValue(r,TypeVariable.ID); :} ;

ATTRIBUTES_GRAPH ::=
	ATTRIBUTES_GRAPH:val  ATTRIBUTE_GRAPH:v {: RESULT = val; VariableDeclaration temp = (VariableDeclaration) v; RESULT.put(String.valueOf(temp.getId()), temp.getValue());:} |
	ATTRIBUTE_GRAPH:v {:RESULT = new HashMap<>(); VariableDeclaration temp = (VariableDeclaration) v; RESULT.put(String.valueOf(temp.getId()), temp.getValue()); :};

ATTRIBUTE_GRAPH ::=
	VARIABLE:v TK_colon TK_colon TYPE TK_equal EXP:e TK_end TK_semicolon  {: RESULT = new VariableDeclaration(v, e); :};

VARIABLE ::=
	TK_titulo:r {: RESULT = r.toLowerCase(); :} |
	TK_ejex:r {: RESULT = r.toLowerCase(); :} |
	TK_ejey:r {: RESULT = r.toLowerCase(); :} |
	TK_titulox:r {: RESULT = r.toLowerCase(); :} |
	TK_tituloy:r {: RESULT = r.toLowerCase(); :} |
	TK_label:r {: RESULT = r.toLowerCase(); :} |
	TK_values:r {: RESULT = r.toLowerCase(); :} |
    error;