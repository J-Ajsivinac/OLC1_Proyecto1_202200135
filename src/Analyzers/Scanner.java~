/* The following code was generated by JFlex 1.7.0 */

package Analyzers;
import java_cup.runtime.*;
import Errores.Errores;
import java.util.ArrayList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analyzers/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  5,  5,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 11,  2,  0,  0,  0,  0,  0, 36, 37,  0,  0, 35, 33, 10,  0, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 24, 34, 12, 32, 13,  0, 
     9, 18, 26, 28, 22, 20,  7, 17, 29, 41, 45,  7, 27, 19, 21, 16, 
    14,  7, 15, 39, 44, 25, 23,  7, 43, 46, 42, 30,  0, 31,  0,  6, 
     0, 18, 26, 28, 22, 20,  7, 17, 29, 41, 45,  7, 27, 19, 21, 16, 
    14,  7, 15, 39, 44, 25, 23,  7, 43, 46, 42,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\2\1\6\1\7\10\4\1\10\3\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\1\2\4"+
    "\4\0\10\4\1\0\5\4\1\0\5\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\21\1\5\1\0\1\4"+
    "\1\0\1\4\2\22\1\4\1\23\1\24\1\25\1\4"+
    "\1\26\2\27\1\30\3\4\2\31\1\32\5\4\1\0"+
    "\1\4\2\33\1\0\1\4\1\2\1\4\1\0\2\4"+
    "\1\34\1\0\1\4\1\35\1\36\1\37\1\4\1\0"+
    "\3\4\1\0\2\4\1\40\1\0\1\4\1\0\2\4"+
    "\2\41\1\4\2\42\1\4\1\0\2\4\1\43\1\0"+
    "\2\4\1\0\1\4\1\0\5\4\1\0\1\4\1\5"+
    "\1\0\1\4\2\44\1\0\1\4\1\45\1\0\1\4"+
    "\2\46\1\47\1\0\2\4\1\0\1\4\2\50\1\0"+
    "\1\4\2\51\1\0\1\4\1\52\1\53\1\52\1\53"+
    "\2\54\1\55\1\0\1\4\2\56\1\0\1\4\2\57"+
    "\2\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\57\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\57\0\u031f\0\u034e\0\u037d\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\274\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\57\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\57\0\353"+
    "\0\u0a77\0\353\0\u0aa6\0\353\0\u0ad5\0\353\0\57\0\353"+
    "\0\353\0\u0b04\0\u0b33\0\u0b62\0\57\0\353\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\57\0\353"+
    "\0\u0d09\0\u0d38\0\u0497\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\353"+
    "\0\u0e23\0\u0e52\0\353\0\353\0\353\0\u0e81\0\u0eb0\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\353\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\57\0\353\0\u10e4\0\u1113\0\u1142"+
    "\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\353\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403"+
    "\0\u1432\0\u1461\0\353\0\u1490\0\u14bf\0\57\0\353\0\u14ee"+
    "\0\u151d\0\353\0\u154c\0\u157b\0\u15aa\0\u15d9\0\353\0\u1608"+
    "\0\u1637\0\u1666\0\u1695\0\u16c4\0\57\0\353\0\u16f3\0\u1722"+
    "\0\57\0\353\0\u1751\0\u1780\0\57\0\57\0\353\0\353"+
    "\0\57\0\353\0\353\0\u17af\0\u17de\0\57\0\353\0\u180d"+
    "\0\u183c\0\57\0\353\0\57\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\0\1\6\1\7"+
    "\1\10\1\6\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\7\1\16\1\17\1\20\1\21\1\7\1\22\1\23"+
    "\1\24\2\7\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\2"+
    "\3\7\1\42\2\7\60\0\1\3\2\0\1\3\52\0"+
    "\2\43\2\0\53\43\6\0\1\44\1\7\6\0\12\7"+
    "\1\0\5\7\11\0\1\7\1\0\6\7\6\0\3\7"+
    "\5\0\12\7\1\0\5\7\11\0\1\7\1\0\6\7"+
    "\10\0\1\10\1\0\1\45\44\0\3\11\2\0\52\11"+
    "\13\0\1\46\51\0\3\7\5\0\1\7\1\47\10\7"+
    "\1\0\5\7\11\0\1\7\1\0\6\7\6\0\3\7"+
    "\5\0\6\7\1\50\3\7\1\0\5\7\11\0\1\7"+
    "\1\0\6\7\6\0\3\7\5\0\1\7\1\51\10\7"+
    "\1\0\5\7\11\0\1\7\1\0\6\7\6\0\3\7"+
    "\5\0\1\7\1\52\10\7\1\0\5\7\11\0\1\7"+
    "\1\0\6\7\6\0\3\7\5\0\2\7\1\53\1\7"+
    "\1\54\1\7\1\55\3\7\1\0\1\56\4\7\11\0"+
    "\1\7\1\57\1\60\5\7\6\0\3\7\5\0\7\7"+
    "\1\61\2\7\1\0\5\7\11\0\1\7\1\0\2\7"+
    "\1\62\1\7\1\63\1\7\6\0\3\7\5\0\2\7"+
    "\1\64\7\7\1\0\5\7\11\0\1\7\1\65\1\66"+
    "\5\7\6\0\3\7\5\0\4\7\1\67\5\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\4\7\1\70\5\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\6\0\3\7\5\0\2\7\1\71\7\7\1\0"+
    "\4\7\1\72\11\0\1\7\1\0\6\7\6\0\3\7"+
    "\5\0\12\7\1\0\5\7\11\0\1\7\1\73\1\74"+
    "\5\7\31\0\1\75\33\0\3\7\5\0\12\7\1\0"+
    "\1\76\4\7\11\0\1\7\1\0\6\7\6\0\3\7"+
    "\5\0\12\7\1\0\5\7\11\0\1\7\1\77\1\100"+
    "\5\7\2\43\1\101\1\0\53\43\10\0\1\102\46\0"+
    "\13\46\1\103\43\46\6\0\3\7\5\0\2\7\1\104"+
    "\7\7\1\0\5\7\11\0\1\7\1\105\1\106\5\7"+
    "\6\0\3\7\5\0\12\7\1\0\5\7\10\0\1\107"+
    "\1\110\1\0\6\7\6\0\3\7\5\0\4\7\1\111"+
    "\5\7\1\0\5\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\1\7\1\112\10\7\1\0\5\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\10\7\1\113"+
    "\1\7\1\0\5\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\12\7\1\0\5\7\11\0\1\7\1\0"+
    "\2\7\1\114\3\7\6\0\3\7\5\0\10\7\1\115"+
    "\1\7\1\0\5\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\12\7\1\0\2\7\1\116\2\7\11\0"+
    "\1\7\1\0\6\7\25\0\1\117\37\0\3\7\5\0"+
    "\7\7\1\120\2\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\6\0\3\7\5\0\10\7\1\121\1\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\6\7\1\122\3\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\6\0\3\7\5\0\6\7\1\123\3\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\12\7\1\0\1\124\4\7\11\0\1\7\1\0\6\7"+
    "\27\0\1\125\35\0\3\7\5\0\11\7\1\126\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\1\7\1\127\10\7\1\0\2\7\1\130\2\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\12\7\1\0"+
    "\1\7\1\131\3\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\7\7\1\132\2\7\1\0\2\7\1\133"+
    "\2\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\4\7\1\134\5\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\46\0\2\135\15\0\3\7\5\0\12\7\1\0"+
    "\5\7\10\0\1\135\1\136\1\0\6\7\23\0\1\137"+
    "\41\0\3\7\5\0\5\7\1\140\4\7\1\0\5\7"+
    "\11\0\1\7\1\0\6\7\54\0\1\141\10\0\3\7"+
    "\5\0\12\7\1\0\5\7\11\0\1\7\1\0\3\7"+
    "\1\142\2\7\12\0\1\45\44\0\13\46\1\103\1\0"+
    "\1\143\41\46\6\0\3\7\5\0\3\7\1\144\6\7"+
    "\1\0\5\7\11\0\1\7\1\0\6\7\25\0\1\145"+
    "\37\0\3\7\5\0\7\7\1\146\2\7\1\0\5\7"+
    "\11\0\1\7\1\0\6\7\6\0\3\7\5\0\1\147"+
    "\11\7\1\0\5\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\4\7\1\150\5\7\1\0\5\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\12\7\1\0"+
    "\5\7\11\0\1\7\1\151\1\152\5\7\6\0\3\7"+
    "\5\0\12\7\1\0\3\7\1\153\1\7\11\0\1\7"+
    "\1\0\6\7\6\0\3\7\5\0\12\7\1\0\5\7"+
    "\11\0\1\7\1\0\2\7\1\154\2\7\1\155\6\0"+
    "\3\7\5\0\12\7\1\0\1\7\1\156\3\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\12\7\1\0"+
    "\5\7\11\0\1\7\1\157\1\160\5\7\6\0\3\7"+
    "\5\0\12\7\1\0\1\161\4\7\11\0\1\7\1\0"+
    "\6\7\6\0\3\7\5\0\6\7\1\162\3\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\12\7\1\0\5\7\10\0\1\163\1\164\1\0\6\7"+
    "\6\0\3\7\5\0\12\7\1\0\1\165\4\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\1\7\1\166"+
    "\10\7\1\0\5\7\11\0\1\7\1\0\6\7\54\0"+
    "\1\167\10\0\3\7\5\0\12\7\1\0\5\7\11\0"+
    "\1\7\1\0\3\7\1\170\2\7\31\0\1\171\33\0"+
    "\3\7\5\0\12\7\1\0\1\172\4\7\11\0\1\7"+
    "\1\0\6\7\6\0\3\7\5\0\1\7\1\173\10\7"+
    "\1\0\5\7\11\0\1\7\1\0\6\7\54\0\1\174"+
    "\10\0\3\7\5\0\12\7\1\0\5\7\11\0\1\7"+
    "\1\0\3\7\1\175\2\7\6\0\3\7\5\0\12\7"+
    "\1\0\4\7\1\176\11\0\1\7\1\0\6\7\22\0"+
    "\1\177\42\0\3\7\5\0\4\7\1\200\5\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\12\7\1\0\2\7\1\201\2\7\11\0\1\7\1\0"+
    "\6\7\22\0\1\202\42\0\3\7\5\0\4\7\1\203"+
    "\5\7\1\0\5\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\6\7\1\204\3\7\1\0\5\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\12\7\1\0"+
    "\2\7\1\205\2\7\11\0\1\7\1\0\6\7\20\0"+
    "\1\206\44\0\3\7\5\0\2\7\1\207\7\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\5\7\1\210\4\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\20\0\1\211\44\0\3\7\5\0\2\7\1\212"+
    "\7\7\1\0\5\7\11\0\1\7\1\0\6\7\33\0"+
    "\1\213\31\0\3\7\5\0\12\7\1\0\2\7\1\214"+
    "\2\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\4\7\1\215\5\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\6\0\3\7\5\0\1\216\11\7\1\0\1\7"+
    "\1\217\1\220\2\7\11\0\1\7\1\0\6\7\25\0"+
    "\1\221\37\0\3\7\5\0\7\7\1\222\2\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\6\7\1\223\3\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\25\0\1\224\37\0\3\7\5\0\7\7\1\225"+
    "\2\7\1\0\5\7\11\0\1\7\1\0\6\7\6\0"+
    "\3\7\5\0\12\7\1\0\5\7\10\0\1\226\1\227"+
    "\1\0\6\7\33\0\1\230\31\0\3\7\5\0\12\7"+
    "\1\0\2\7\1\231\2\7\11\0\1\7\1\0\6\7"+
    "\6\0\3\7\5\0\7\7\1\232\2\7\1\0\5\7"+
    "\11\0\1\7\1\0\6\7\21\0\1\233\43\0\3\7"+
    "\5\0\3\7\1\234\6\7\1\0\5\7\11\0\1\7"+
    "\1\0\6\7\20\0\1\235\44\0\3\7\5\0\2\7"+
    "\1\236\7\7\1\0\5\7\11\0\1\7\1\0\6\7"+
    "\6\0\3\7\5\0\5\7\1\237\4\7\1\0\5\7"+
    "\11\0\1\7\1\0\6\7\6\0\3\7\5\0\12\7"+
    "\1\0\5\7\11\0\1\7\1\240\1\241\5\7\6\0"+
    "\3\7\5\0\4\7\1\242\5\7\1\0\5\7\11\0"+
    "\1\7\1\0\6\7\6\0\3\7\5\0\12\7\1\0"+
    "\5\7\11\0\1\7\1\243\1\244\5\7\22\0\1\245"+
    "\42\0\3\7\5\0\4\7\1\246\5\7\1\0\5\7"+
    "\11\0\1\7\1\0\6\7\52\0\1\247\12\0\3\7"+
    "\5\0\12\7\1\0\5\7\11\0\1\7\1\0\1\7"+
    "\1\250\4\7\24\0\1\251\40\0\3\7\5\0\6\7"+
    "\1\252\3\7\1\0\5\7\11\0\1\7\1\0\6\7"+
    "\17\0\1\253\45\0\3\7\5\0\1\7\1\254\10\7"+
    "\1\0\5\7\11\0\1\7\1\0\6\7\53\0\1\255"+
    "\2\0\1\256\6\0\3\7\5\0\12\7\1\0\5\7"+
    "\11\0\1\7\1\0\2\7\1\257\2\7\1\260\24\0"+
    "\1\261\40\0\3\7\5\0\6\7\1\262\3\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\6\0\3\7\5\0"+
    "\1\7\1\263\10\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\25\0\1\264\37\0\3\7\5\0\7\7\1\265"+
    "\2\7\1\0\5\7\11\0\1\7\1\0\6\7\22\0"+
    "\1\266\42\0\3\7\5\0\4\7\1\267\5\7\1\0"+
    "\5\7\11\0\1\7\1\0\6\7\22\0\1\270\42\0"+
    "\3\7\5\0\4\7\1\271\5\7\1\0\5\7\11\0"+
    "\1\7\1\0\6\7\24\0\1\272\40\0\3\7\5\0"+
    "\6\7\1\273\3\7\1\0\5\7\11\0\1\7\1\0"+
    "\6\7\23\0\1\274\41\0\3\7\5\0\5\7\1\275"+
    "\4\7\1\0\5\7\11\0\1\7\1\0\6\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6251];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\10\1\1\11"+
    "\3\1\10\11\3\1\4\0\10\1\1\0\5\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\7\1\1\11"+
    "\5\1\1\11\7\1\1\0\1\1\1\11\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\5\1\1\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\11\5\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\1\0\5\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\2\11\2\1\1\11"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}


    private ArrayList<token> lexemas = new ArrayList<token>();
    private ArrayList<Errores> erroreslexicos = new ArrayList<Errores>();

	public ArrayList<token> getLexemas() {
		return lexemas;
	}

	public ArrayList<Errores> getErroresL  () {
		return erroreslexicos;
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
  	yyline = 1; 
	yychar = 1; 
        yycolumn = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { erroreslexicos.add(new Errores(0,"El caracter : '"+yytext()+"' No pertenece al lenguaje", Integer.toString(yyline), Integer.toString(yychar)));
            } 
            // fall through
          case 49: break;
          case 2: 
            { 
            } 
            // fall through
          case 50: break;
          case 3: 
            { yychar = 1; yycolumn=1;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return symbol(ParserSym.TK_id, yytext());
            } 
            // fall through
          case 52: break;
          case 5: 
            { return symbol(ParserSym.TK_double, yytext());
            } 
            // fall through
          case 53: break;
          case 6: 
            { return symbol(ParserSym.TK_lt, yytext());
            } 
            // fall through
          case 54: break;
          case 7: 
            { return symbol(ParserSym.TK_gt, yytext());
            } 
            // fall through
          case 55: break;
          case 8: 
            { return symbol(ParserSym.TK_colon, yytext());
            } 
            // fall through
          case 56: break;
          case 9: 
            { return symbol(ParserSym.TK_lbracket, yytext());
            } 
            // fall through
          case 57: break;
          case 10: 
            { return symbol(ParserSym.TK_rbracket, yytext());
            } 
            // fall through
          case 58: break;
          case 11: 
            { return symbol(ParserSym.TK_equal, yytext());
            } 
            // fall through
          case 59: break;
          case 12: 
            { return symbol(ParserSym.TK_minus, yytext());
            } 
            // fall through
          case 60: break;
          case 13: 
            { return symbol(ParserSym.TK_semicolon, yytext());
            } 
            // fall through
          case 61: break;
          case 14: 
            { return symbol(ParserSym.TK_comma, yytext());
            } 
            // fall through
          case 62: break;
          case 15: 
            { return symbol(ParserSym.TK_lparen, yytext());
            } 
            // fall through
          case 63: break;
          case 16: 
            { return symbol(ParserSym.TK_rparen, yytext());
            } 
            // fall through
          case 64: break;
          case 17: 
            { return symbol(ParserSym.TK_string, yytext());
            } 
            // fall through
          case 65: break;
          case 18: 
            { return symbol(ParserSym.TK_res, yytext());
            } 
            // fall through
          case 66: break;
          case 19: 
            { return symbol(ParserSym.TK_arr, yytext());
            } 
            // fall through
          case 67: break;
          case 20: 
            { return symbol(ParserSym.TK_mod, yytext());
            } 
            // fall through
          case 68: break;
          case 21: 
            { return symbol(ParserSym.TK_max, yytext());
            } 
            // fall through
          case 69: break;
          case 22: 
            { return symbol(ParserSym.TK_mul, yytext());
            } 
            // fall through
          case 70: break;
          case 23: 
            { return symbol(ParserSym.TK_min, yytext());
            } 
            // fall through
          case 71: break;
          case 24: 
            { return symbol(ParserSym.TK_end, yytext());
            } 
            // fall through
          case 72: break;
          case 25: 
            { return symbol(ParserSym.TK_div, yytext());
            } 
            // fall through
          case 73: break;
          case 26: 
            { return symbol(ParserSym.TK_var, yytext());
            } 
            // fall through
          case 74: break;
          case 27: 
            { return symbol(ParserSym.TK_sum, yytext());
            } 
            // fall through
          case 75: break;
          case 28: 
            { return symbol(ParserSym.TK_moda, yytext());
            } 
            // fall through
          case 76: break;
          case 29: 
            { return symbol(ParserSym.TK_exec, yytext());
            } 
            // fall through
          case 77: break;
          case 30: 
            { return symbol(ParserSym.TK_ejex, yytext());
            } 
            // fall through
          case 78: break;
          case 31: 
            { return symbol(ParserSym.TK_ejey, yytext());
            } 
            // fall through
          case 79: break;
          case 32: 
            { return symbol(ParserSym.TK_char, yytext());
            } 
            // fall through
          case 80: break;
          case 33: 
            { return symbol(ParserSym.TK_print, yytext());
            } 
            // fall through
          case 81: break;
          case 34: 
            { return symbol(ParserSym.TK_media, yytext());
            } 
            // fall through
          case 82: break;
          case 35: 
            { return symbol(ParserSym.TK_label, yytext());
            } 
            // fall through
          case 83: break;
          case 36: 
            { return symbol(ParserSym.TK_values, yytext());
            } 
            // fall through
          case 84: break;
          case 37: 
            { return symbol(ParserSym.TK_column, yytext());
            } 
            // fall through
          case 85: break;
          case 38: 
            { return symbol(ParserSym.TK_titulo, yytext());
            } 
            // fall through
          case 86: break;
          case 39: 
            { return symbol(ParserSym.TK_program, yytext());
            } 
            // fall through
          case 87: break;
          case 40: 
            { return symbol(ParserSym.TK_mediana, yytext());
            } 
            // fall through
          case 88: break;
          case 41: 
            { return symbol(ParserSym.TK_console, yytext());
            } 
            // fall through
          case 89: break;
          case 42: 
            { return symbol(ParserSym.TK_titulox, yytext());
            } 
            // fall through
          case 90: break;
          case 43: 
            { return symbol(ParserSym.TK_tituloy, yytext());
            } 
            // fall through
          case 91: break;
          case 44: 
            { return symbol(ParserSym.TK_graphpie, yytext());
            } 
            // fall through
          case 92: break;
          case 45: 
            { return symbol(ParserSym.TK_graphbar, yytext());
            } 
            // fall through
          case 93: break;
          case 46: 
            { return symbol(ParserSym.TK_varianza, yytext());
            } 
            // fall through
          case 94: break;
          case 47: 
            { return symbol(ParserSym.TK_graphline, yytext());
            } 
            // fall through
          case 95: break;
          case 48: 
            { return symbol(ParserSym.TK_histogram, yytext());
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
